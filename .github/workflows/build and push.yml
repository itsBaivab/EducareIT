# Build and Push Docker Image to an Azure Container Registry
name: Build and Push Docker Image # This name must match exactly in the trigger

on:
  workflow_run:
    workflows: ["Maven Build"]
    types:
      - completed
    branches:
      - "production"

jobs:
  publish:
    name: Build and Push
    environment:
      name: production
    runs-on: ubuntu-latest
    permissions:
      contents: write # Add permission to write to repository
      id-token: write # Add permission to write to repository
      packages: write # Add permission to write to repository
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      build_status: ${{ job.status }}
      image_tag: ${{ env.NEW_VERSION }}

    steps:
      # Step 1: Check out the repository with token
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} # Use GitHub token for authentication

      # Step 2: Get latest version tag
      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y%m%d')" >> $GITHUB_ENV

      # Step 3: Generate new version tag
      - name: Generate Version
        id: generate-version
        run: |
          current_version=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$current_version"
          new_version="v$major.$minor.$((patch + 1))"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      # Step 4: Add deployment URL (optional)
      - name: Set deployment info
        id: deploy_info
        run: echo "url=https://educare.azurecr.io" >> $GITHUB_OUTPUT

      # Step 5: Login to Azure Container Registry with environment secrets
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: educare.azurecr.io
          username: ${{ secrets.ACR_USERNAME }} # Updated secret name
          password: ${{ secrets.ACR_PASSWORD }} # Updated secret name

      # Step 6: Build and push with semantic versioning
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            educare.azurecr.io/educare-deployment:latest
            educare.azurecr.io/educare-deployment:${{ env.NEW_VERSION }}
      # Step 7: Configure Git
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # Step 8: Create and push git tag with token
      - name: Create Git Tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ env.NEW_VERSION }}

      - name: Signal Workflow Completion
        run: |
          echo "Workflow completed successfully"
          echo "Image Tag: ${{ env.NEW_VERSION }}"
          echo "::set-output name=status::success"  # Explicit status output
        if: success()

  # Start of the deploy job in the same file:

  deploy:
    needs: publish # This ensures deploy runs after publish
    name: Deploy to Azure
    environment:
      name: production
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for Azure login
      contents: read
    if: needs.publish.outputs.build_status == 'success'

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Changed from individual credentials to AZURE_CREDENTIALS
          enable-AzPSSession: false

      - name: Verify Azure Connection
        run: |
          echo "Verifying Azure connection..."
          az account show
          if [ $? -ne 0 ]; then
            echo "Failed to verify Azure connection"
            exit 1
          fi

      - name: Deploy to Azure Web App
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: "educare-webapp"
          slot-name: "educareintertechnology-pre-deployment"
          images: "educare.azurecr.io/educare-deployment:${{ needs.publish.outputs.image_tag }}"

      - name: Deployment Status
        if: always()
        run: |
          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
