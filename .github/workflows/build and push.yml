# This workflow builds and pushes a Docker image to Azure Container Registry
name: Build and Push Docker Image

on:
  workflow_run:
    workflows: ["Maven Build"]
    types:
      - completed
    branches:
      - "production"

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      # Step 1: Check out the repository with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Get latest version tag
      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y%m%d')" >> $GITHUB_ENV

      # Step 3: Generate new version tag
      - name: Generate Version
        id: generate-version
        run: |
          current_version=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$current_version"
          new_version="v$major.$minor.$((patch + 1))"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      # Step 4: Login to Azure Container Registry
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: educare.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Step 5: Build and push with semantic versioning
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            educare.azurecr.io/educare-deployment:latest
            educare.azurecr.io/educare-deployment:${{ env.NEW_VERSION }}
            educare.azurecr.io/educare-deployment:${{ env.NEW_VERSION }}-${{ env.BUILD_DATE }}
            educare.azurecr.io/educare-deployment:production

      # Step 6: Create and push git tag
      - name: Create Git Tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}
